# Multi-arch capable build for socket server
# syntax=docker/dockerfile:1.7-labs

ARG NODE_VERSION=22.5.1
FROM --platform=$BUILDPLATFORM node:${NODE_VERSION}-slim AS base
ENV PNPM_HOME=/pnpm
ENV PATH=$PNPM_HOME:$PATH
RUN corepack enable
WORKDIR /app

RUN apt-get update && apt-get install -y --no-install-recommends python3 make g++ ca-certificates && rm -rf /var/lib/apt/lists/*

# Only copy root manifest workspace info first for faster caching
COPY package.json turbo.json .npmrc* .yarnrc* package-lock.json* pnpm-lock.yaml* ./
COPY packages/typescript-config/package.json packages/typescript-config/
COPY packages/eslint-config/package.json packages/eslint-config/
COPY packages/database/package.json packages/database/
COPY apps/socket/package.json apps/socket/
COPY apps/web/package.json apps/web/

# Install dependencies (npm)
RUN npm install --include=dev

# Copy sources
COPY . .

# Generate migrations for Postgres
# We want the generated migrations to reside under /app/shared/drizzle/pg so that
# the runtime image can COPY them from /app/shared/drizzle/pg. Because the migrate
# script runs with working directory /app/packages/database, we need a relative
# path that walks up to /app/shared/drizzle/pg.
ENV DRIZZLE_OUT=../../shared/drizzle/pg
RUN npm run migrate --workspace @protoshock/database || echo "[warn] migration generation failed (possibly already up-to-date)"
RUN npm run build --workspace @protoshock/database --workspace @protoshock/socket && npm prune --omit=dev

FROM node:${NODE_VERSION}-slim AS runtime
WORKDIR /app
ENV NODE_ENV=production
# Copy only needed built artifacts and node_modules
COPY --from=base /app/node_modules ./node_modules
COPY --from=base /app/apps/socket/dist ./apps/socket/dist
COPY --from=base /app/apps/socket/serverIcon.png ./apps/socket/serverIcon.png
COPY --from=base /app/packages/database/dist ./packages/database/dist
# Copy repository shared migrations (present in repo root at shared/drizzle)
# Copy generated migrations from database package
# Copy generated migrations (drizzle places them under /app/shared/drizzle)
# Copy migrations
COPY --from=base /app/shared/drizzle/pg /app/shared/drizzle/pg
# Also keep a seed copy outside the shared volume mount so we can repopulate the first time the named volume is empty
COPY --from=base /app/shared/drizzle/pg /app/drizzle-seed/pg
# Copy package manifests to preserve ESM boundaries
COPY --from=base /app/apps/socket/package.json ./apps/socket/package.json
COPY --from=base /app/packages/database/package.json ./packages/database/package.json
COPY <<'EOF' /app/entrypoint.sh
#!/usr/bin/env bash
set -euo pipefail
echo "[entrypoint] Starting socket server (Postgres)"

# If shared volume is empty (first run) seed migrations from baked image copy
if [ ! -d /app/shared/drizzle/pg ] && [ -d /app/drizzle-seed/pg ]; then
	echo "[entrypoint] Seeding migrations into shared volume..."
	mkdir -p /app/shared/drizzle
	cp -r /app/drizzle-seed/pg /app/shared/drizzle/
fi

until node -e "import('pg').then(async m=>{const c=new m.Client({connectionString: process.env.DATABASE_URL||'postgres://postgres:postgres@db:5432/protoshock'});await c.connect();await c.end();}).catch(e=>{console.error(e);process.exit(1);})"; do
	echo "[entrypoint] Waiting for database..."; sleep 2;
done
node -e "import('./packages/database/dist/index.js').then(async m=>{const db=new m.ProtoDBClass();await db.init();}).catch(e=>{console.error(e);process.exit(1);})"
# Create sentinel so other services know migrations done
touch /app/shared/.migrations_ready || true
exec node apps/socket/dist/index.js
EOF
RUN chmod +x /app/entrypoint.sh
EXPOSE 8880
ENTRYPOINT ["/app/entrypoint.sh"]
