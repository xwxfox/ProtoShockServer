# Multi-arch capable build for Next.js web app
# syntax=docker/dockerfile:1.7-labs
ARG NODE_VERSION=22.5.1
ARG NEXT_PUBLIC_SOCKET_SERVER_URL=http://socket
ARG NEXT_PUBLIC_SOCKET_SERVER_PORT=8880
ARG NEXT_PUBLIC_APP_PORT=3000
ARG NEXT_PUBLIC_SHOW_PORT_IN_SERVER_IP=true
FROM --platform=$BUILDPLATFORM node:${NODE_VERSION}-slim AS base
ENV PNPM_HOME=/pnpm
ENV PATH=$PNPM_HOME:$PATH
RUN corepack enable
WORKDIR /app


# Dependencies for building (may need build tools for optional deps)
RUN apt-get update && apt-get install -y --no-install-recommends python3 make g++ ca-certificates && rm -rf /var/lib/apt/lists/*

# Copy manifests for better caching
COPY package.json turbo.json .npmrc* .yarnrc* package-lock.json* pnpm-lock.yaml* ./
COPY packages/typescript-config/package.json packages/typescript-config/
COPY packages/eslint-config/package.json packages/eslint-config/
COPY packages/database/package.json packages/database/
COPY apps/web/package.json apps/web/
COPY apps/socket/package.json apps/socket/

RUN npm install --include=dev

# Copy source
COPY . .

# Build database (for types) then web (standalone output)
ENV NEXT_PUBLIC_SOCKET_SERVER_URL=${NEXT_PUBLIC_SOCKET_SERVER_URL} \
	NEXT_PUBLIC_SOCKET_SERVER_PORT=${NEXT_PUBLIC_SOCKET_SERVER_PORT} \
	NEXT_PUBLIC_APP_PORT=${NEXT_PUBLIC_APP_PORT} \
	NEXT_PUBLIC_SHOW_PORT_IN_SERVER_IP=${NEXT_PUBLIC_SHOW_PORT_IN_SERVER_IP}
# Build database (types) & web app (no migration generation here; socket owns migrations)
RUN npm run build --workspace @protoshock/database --if-present \
 && npm run build --workspace @protoshock/web \
 && npm prune --omit=dev

FROM node:${NODE_VERSION}-slim AS runtime
ENV NODE_ENV=production
WORKDIR /app
# Copy standalone server (contains minimal node_modules)
COPY --from=base /app/apps/web/.next/standalone ./
COPY --from=base /app/apps/web/.next/static ./apps/web/.next/static
COPY --from=base /app/apps/web/public ./apps/web/public
COPY --from=base /app/packages/database/dist ./packages/database/dist
# Copy generated migrations from database package
# Copy generated migrations (drizzle places them under /app/shared/drizzle)
COPY --from=base /app/shared/drizzle/pg /app/shared/drizzle/pg
# Also keep a seed copy outside the shared volume mount so we can repopulate the first time the named volume is empty
COPY --from=base /app/shared/drizzle/pg /app/drizzle-seed/pg
# Copy needed node_modules for database runtime (drizzle-orm, etc.)
COPY --from=base /app/node_modules ./node_modules
EXPOSE 3000
COPY <<'EOF' /app/entrypoint.sh
#!/usr/bin/env bash
set -euo pipefail
echo "[entrypoint] Starting web app (Postgres)"

# If shared volume is empty (first run) seed migrations from baked image copy
if [ ! -d /app/shared/drizzle/pg ] && [ -d /app/drizzle-seed/pg ]; then
	echo "[entrypoint] Seeding migrations into shared volume..."
	mkdir -p /app/shared/drizzle
	cp -r /app/drizzle-seed/pg /app/shared/drizzle/
fi

until node -e "import('pg').then(async m=>{const c=new m.Client({connectionString: process.env.DATABASE_URL||'postgres://postgres:postgres@db:5432/protoshock'});await c.connect();await c.end();}).catch(e=>{process.exit(1);})"; do
	echo "[entrypoint] Waiting for database..."; sleep 2;
done

# Wait for migrations sentinel from socket (up to 60s)
echo "[entrypoint] Waiting for migrations sentinel..."
for i in {1..30}; do
	if [ -f /app/shared/.migrations_ready ]; then
		echo "[entrypoint] Migrations sentinel detected."; break;
	fi
	sleep 2;
done

# Initialize DB (will skip migrations if not owner)
node -e "import('./packages/database/dist/index.js').then(async m=>{const db=new m.ProtoDBClass();process.env.MIGRATION_OWNER='false';await db.init();}).catch(e=>{console.error(e);})"
exec node apps/web/server.js -p 3000
EOF
RUN chmod +x /app/entrypoint.sh
ENTRYPOINT ["/app/entrypoint.sh"]
